syntax = 'proto3';

// Params
package grpc;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

option (gogoproto.marshaler_all) = false;
option (gogoproto.unmarshaler_all) = false;
option (gogoproto.sizer_all) = false;
option (gogoproto.goproto_registration) = true;
option (gogoproto.messagename_all) = true;
option (gogoproto.protosizer_all) =false;


message Empty {
}

message AddressParam {
	 bytes Address = 1 [(gogoproto.customtype) = "github.com/gallactic/gallactic/crypto.Address", (gogoproto.nullable) = false];

}

message AccountParam {
  bytes Account = 1 [(gogoproto.customtype) = "github.com/gallactic/gallactic/rpc.FilterData", (gogoproto.nullable) = false];
  
}

message AccountsOutput {
   uint64 BlockHeight = 1;
   repeated google.protobuf.ListValue  Accounts  = 2 [(gogoproto.customtype) = "github.com/gallactic/gallactic/core/account.Account", (gogoproto.nullable) = false];
}

message AccountOutput{
   bytes  Account  = 2 [(gogoproto.customtype) = "github.com/gallactic/gallactic/core/account.Account", (gogoproto.nullable) = false];
}

message ValidatorOutput {
	uint64 BlockHeight  = 1 ;       
    repeated google.protobuf.ListValue  BondedValidators  = 2 [(gogoproto.customtype) = "github.com/gallactic/gallactic/core/validator.Validator", (gogoproto.nullable) = false];
	repeated google.protobuf.ListValue  UnbondingValidators  = 3 [(gogoproto.customtype) = "github.com/gallactic/gallactic/core/validator.Validator", (gogoproto.nullable) = false];
}

message StorageAtInput {
 bytes Address = 1 [(gogoproto.customtype) = "github.com/gallactic/gallactic/crypto.Address",(gogoproto.nullable) = false];
 bytes	Key = 2    [(gogoproto.customtype) = "github.com/gallactic/gallactic/common/binary.HexBytes",(gogoproto.nullable) = false];
}

message StorageOutput {
 bytes	Key = 1   [(gogoproto.customtype) = "github.com/gallactic/gallactic/common/binary.HexBytes", (gogoproto.nullable) = false];
 bytes	Value = 2    [(gogoproto.customtype) = "github.com/gallactic/gallactic/common/binary.HexBytes", (gogoproto.nullable) = false];

}



message BlockInput {
	uint64 height = 1;
}

message BlocksInput {
	uint64 minHeight = 1;
	uint64 maxHeight = 2;
}


message BlockOutput {
    repeated  bytes BlockMeta  = 1  [(gogoproto.customtype) = "github.com/tendermint/tendermint/types.BlockMeta", (gogoproto.nullable) = false];
    repeated  bytes  Block  = 2 [(gogoproto.customtype) = "github.com/tendermint/tendermint/types.Block", (gogoproto.nullable) = false];

}

message BlocksOutput {
 int32  LastHeight = 1;
 repeated google.protobuf.ListValue    BlockMeta  = 2  [(gogoproto.customtype) = "github.com/tendermint/tendermint/types.BlockMeta", (gogoproto.nullable) = false];

}

message StatusOutput {
 bytes  NodeInfo     = 1 [(gogoproto.customtype) = "github.com/tendermint/tendermint/p2p.NodeInfo",(gogoproto.nullable) = false];
 bytes	GenesisHash  = 2  [(gogoproto.customtype) = "github.com/gallactic/gallactic/common/binary.HexBytes",(gogoproto.nullable) = false];
 bytes	PubKey       = 3   [(gogoproto.customtype) =   "github.com/gallactic/gallactic/crypto.PublicKey",(gogoproto.nullable) = false];
 bytes	LatestBlockHash = 4  [(gogoproto.customtype) = "github.com/gallactic/gallactic/common/binary.HexBytes", (gogoproto.nullable) = false];
 uint64	LatestBlockHeight =5;
 int64	LatestBlockTime  =6;
 string	NodeVersion      =7;
}

message DumpConsensusStateOutput {
   bytes RoundState = 1  [(gogoproto.customtype) = "github.com/tendermint/tendermint/consensus/types.RoundStateSimple",(gogoproto.nullable) = false];
   repeated google.protobuf.ListValue PeerRoundStates = 2 [(gogoproto.customtype) = "github.com/tendermint/tendermint/consensus/types.PeerRoundState",(gogoproto.nullable) = false];
}

message GenesisOutput{
   repeated google.protobuf.ListValue  Genesis = 1 [(gogoproto.customtype) = "github.com/gallactic/gallactic/core/proposal.Genesis",(gogoproto.nullable) = false];
}

message ChainIdOutput{
  string ChainName = 1;
  string ChainId  = 2  ; 
  bytes	   GenesisHash = 3 [(gogoproto.customtype) = "github.com/gallactic/gallactic/common/binary.HexBytes", (gogoproto.nullable) = false];
}


message UnconfirmedTxsOutput {
    int32 Count = 1;
	repeated google.protobuf.ListValue  Txs = 3 [(gogoproto.customtype) = "github.com/gallactic/gallactic/txs.Envelope", (gogoproto.nullable) = false];
}

message UnconfirmedTxsInput {
   int32 maxTxs = 1;
}

message BlockTxsOutput{
     int32 Count = 1;
	 repeated google.protobuf.ListValue  Txs = 3 [(gogoproto.customtype) = "github.com/gallactic/gallactic/txs.Envelope", (gogoproto.nullable) = false];
}


message NetInfoOutput {
 bool  Listening =1;
 repeated string Listeners = 2;
 repeated google.protobuf.ListValue  Peer = 3 [(gogoproto.customtype) = "github.com/gallactic/gallactic/rpc.Peer", (gogoproto.nullable) = false];

}

message PeersOutput {
	repeated google.protobuf.ListValue  Peer = 1 [(gogoproto.customtype) = "github.com/gallactic/gallactic/rpc.Peer", (gogoproto.nullable) = false];

}

message Transactparam {
	repeated google.protobuf.ListValue  txs = 1 [(gogoproto.customtype) = "github.com/gallactic/gallactic/txs.Envelope", (gogoproto.nullable) = false];
}
message Receipt {
 repeated google.protobuf.ListValue  TxHash = 1 [(gogoproto.customtype) = "github.com/gallactic/gallactic/txs.Receipt", (gogoproto.nullable) = false];;
}

// #BEGIN(account)
// Account Service definition
service Accounts {
	rpc GetAccount(AddressParam) returns (AccountOutput);
	rpc GetAccounts(AccountParam) returns (AccountsOutput);
	rpc GetValidators(Empty) returns (ValidatorOutput);
	rpc GetStorage(StorageAtInput) returns (StorageOutput);
	rpc GetStorageAt(StorageAtInput) returns(StorageOutput);
}

service BlockChain {
	rpc GetBlock(BlockInput) returns (BlockOutput);
	rpc GetBlocks(BlocksInput) returns (BlocksOutput);
	rpc Getstatus(Empty) returns(StatusOutput);
    rpc GetLatestBlock(BlockInput) returns(BlockOutput);
	rpc GetConsensusState(Empty) returns (DumpConsensusStateOutput);
    rpc GetGenesis(Empty) returns(GenesisOutput);
	rpc GetChainID(Empty) returns(ChainIdOutput);
	rpc GetBlockTxs(BlockInput)returns(BlockTxsOutput);
}


service Transaction {
	rpc BroadcastTx(Transactparam) returns(Receipt);
	rpc GetUnconfirmedTxs(UnconfirmedTxsInput) returns(UnconfirmedTxsOutput);
	
}

service Network {
  rpc GetNetworkInfo(Empty) returns(NetInfoOutput);
  rpc GetPeers(Empty) returns (PeersOutput);
}
	